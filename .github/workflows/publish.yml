name: Build and publish wheels
on:
  push:
permissions:
  contents: read
jobs:
  select:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.select.outputs.build }}
      publish: ${{ steps.select.outputs.publish }}
      core-suffix: ${{ steps.select.outputs.core-suffix }}
    steps:
      - name: initialize
        run: |
          echo "GPUBACKENDTOOLSWHL_BUILD=false" >> "$GITHUB_ENV"
          echo "GPUBACKENDTOOLSWHL_CORE_SUFFIX=false" >> "$GITHUB_ENV"
          echo "GPUBACKENDTOOLSWHL_PUBLISH=false" >> "$GITHUB_ENV"
      - name: build on commit message
        if: contains(github.event.head_commit.message, '[ci:build-wheels]')
        run: |
          echo "GPUBACKENDTOOLSWHL_BUILD=true" >> "$GITHUB_ENV"
      - name: build and publish on tag 'v*'
        if: startsWith(github.event.ref, 'refs/tags/v')
        run: |
          echo "GPUBACKENDTOOLSWHL_BUILD=true" >> "$GITHUB_ENV"
          echo "GPUBACKENDTOOLSWHL_PUBLISH=true" >> "$GITHUB_ENV"
      - name: add core-suffix on non-official repo
        if: github.event.repository.full_name != 'mikekatz04/GPUBackendTools'
        run: |
          echo "GPUBACKENDTOOLSWHL_CORE_SUFFIX=true" >> "$GITHUB_ENV"
      - name: output results
        id: select
        run: |
          echo "build=$GPUBACKENDTOOLSWHL_BUILD" >> $GITHUB_OUTPUT
          echo "publish=$GPUBACKENDTOOLSWHL_PUBLISH" >> $GITHUB_OUTPUT
          echo "core-suffix=$GPUBACKENDTOOLSWHL_CORE_SUFFIX" >> $GITHUB_OUTPUT
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setuptools_scm.outputs.value }}
    steps:
      # =========================
      # = I - Retrieve sources  =
      # =========================
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      # ===================================
      # = II - Prepare Python environment =
      # ===================================
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: |
          pip install setuptools_scm
      # ========================
      # = III - Detect version =
      # ========================
      - name: Update version scheme
        run: |
          sed -i'' -e 's|version_scheme = "no-guess-dev"|version_scheme = "only-version"|g' pyproject.toml
          sed -i'' -e 's|local_scheme = "node-and-date"|local_scheme = "no-local-version"|g' pyproject.toml
      - name: Detect current version
        id: setuptools_scm
        run: |
          VERSION="$(python -m setuptools_scm)"
          echo "notice:: Detected version: ${VERSION}"
          echo "value=${VERSION}" >> $GITHUB_OUTPUT
          echo "version: ${VERSION}" >> $GITHUB_STEP_SUMMARY
  build:
    name: gpubackendtools-${{ matrix.release }} on ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    needs:
      - select
      - version
    if: needs.select.outputs.build == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - release: cpu
            os: ubuntu-latest
            arch: x86_64
            kind: core
            reqpython: '>=3.9'
          - release: cuda11x
            os: ubuntu-latest
            arch: x86_64
            kind: cuda_plugin
            cuda_major: 11
            cuda_minor: 8
            reqpython: '>=3.9'
          - release: cuda12x
            os: ubuntu-latest
            arch: x86_64
            kind: cuda_plugin
            cuda_major: 12
            cuda_minor: 4
            reqpython: '>=3.9'
          - release: cpu
            os: ubuntu-24.04-arm
            arch: aarch64
            kind: core
            reqpython: '>=3.10'
          - release: cuda11x
            os: ubuntu-latest
            arch: aarch64
            target: manylinux
            kind: cuda_plugin
            cuda_major: 11
            cuda_minor: 8
          - release: cuda12x
            os: ubuntu-latest
            arch: aarch64
            target: manylinux
            kind: cuda_plugin
            cuda_major: 12
            cuda_minor: 6
          - release: cpu
            os: macos-13
            kind: core
            reqpython: '>=3.9'
            arch: x86_64
            macos_ver: 13.0
          - release: cpu
            os: macos-14
            kind: core
            reqpython: '>=3.9'
            arch: arm64
            macos_ver: 14.0
    steps:
      # =========================
      # = I - Retrieve sources  =
      # =========================
      - uses: actions/checkout@v4
      # ========================
      # = II - Update sources  =
      # ========================
      # - name: Add release suffix to project name
      #   if: matrix.kind != 'core'
      #   run: |
      #     sed -i'' -e 's|" #@NAMESUFFIX@|-${{ matrix.release }}"|g' pyproject.toml
      # - name: Add release suffix to core package for TestPyPI
      #   if: matrix.kind == 'core' && needs.select.outputs.core-suffix == 'true'
      #   run: |
      #     sed -i'' -e 's|" #@NAMESUFFIX@|-${{ matrix.release }}"|g' pyproject.toml
      # Add CuPy dependency
      - name: Add Cupy dependency
        if: matrix.kind == 'cuda_plugin'
        run: |
          sed -i'' -e 's|#@DEPS_CUPYCUDA@|"cupy-cuda${{ matrix.cuda_major }}x"|g' pyproject.toml
      # Add Core project dependency
      - name: Add core project dependency on plugin
        if: matrix.kind != 'core' && needs.select.outputs.core-suffix == 'true'
        run: |
          sed -i'' -e 's|#@DEPS_GPUBACKENDTOOLSCORE@|"gpubackendtools-cpu==${{ needs.version.outputs.version }}"|g' pyproject.toml
      - name: Add core project dependency on plugin
        if: matrix.kind != 'core' && needs.select.outputs.core-suffix == 'false'
        run: |
          sed -i'' -e 's|#@DEPS_GPUBACKENDTOOLSCORE@|"gpubackendtools==${{ needs.version.outputs.version }}"|g' pyproject.toml
      # Remove base sources from plugin wheels
      - name: Exclude core package from plugins
        if: matrix.kind != 'core'
        run: |
          sed -i'' -e '/@SKIP_PLUGIN@/d' pyproject.toml
      # ===================================
      # = III. Prepare build environment  =
      # ===================================
      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest' && matrix.arch != 'x86_64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      # =====================
      # = IV. Build wheels  =
      # =====================
      - name: Build core wheels (macOS)
        if: runner.os == 'macOS' && matrix.kind == 'core'
        uses: actions/setup-python@v5
        inputs:
          python-version: ${{ matrix.reqpython }}
      - name: Build core wheels (Linux)
        if: runner.os == 'Linux' && matrix.kind == 'core'
        uses: actions/setup-python@v5
        inputs:
          python-version: ${{ matrix.reqpython }}
      - name: Build cuda plugin wheels (Linux)
        if: runner.os == 'Linux' && matrix.kind == 'cuda_plugin' && matrix.arch == 'x86_64'
        uses: actions/setup-python@v5
        inputs:
          python-version: ${{ matrix.reqpython }}
  publish:
    runs-on: ubuntu-latest
    environment: pypiconf
    defaults:
      run:
        shell: bash
    needs:
      - build
      - select
    if: needs.select.outputs.publish == 'true'
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true
      - name: List wheels
        run: |
          ls -al dist/*
      - name: Install twine from PyPI
        uses: install-pinned/twine@c7ca21f7f66fc895b73cba784dc1d0e302e3b4a3 # 6.1.0
      - name: Publish release distributions to registry
        env:
          TWINE_NON_INTERACTIVE: "yes"
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          TWINE_REPOSITORY: ${{ vars.TWINE_REPOSITORY }}
          TWINE_USERNAME: ${{ vars.TWINE_USERNAME }}
        run: |
          twine upload dist/*