name: Build and publish wheels
on:
  push:
permissions:
  contents: read
jobs:
  select:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.select.outputs.build }}
      publish: ${{ steps.select.outputs.publish }}
      core-suffix: ${{ steps.select.outputs.core-suffix }}
    steps:
      - name: initialize
        run: |
          echo "GPUBACKENDTOOLSWHL_BUILD=false" >> "$GITHUB_ENV"
          echo "GPUBACKENDTOOLSWHL_CORE_SUFFIX=false" >> "$GITHUB_ENV"
          echo "GPUBACKENDTOOLSWHL_PUBLISH=false" >> "$GITHUB_ENV"
      - name: build on commit message
        if: contains(github.event.head_commit.message, '[ci:build-wheels]')
        run: |
          echo "GPUBACKENDTOOLSWHL_BUILD=true" >> "$GITHUB_ENV"
      - name: publish on commit message
        if: contains(github.event.head_commit.message, '[ci:publish-wheels]')
        run: |
          echo "GPUBACKENDTOOLSWHL_BUILD=true" >> "$GITHUB_ENV"
          echo "GPUBACKENDTOOLSWHL_PUBLISH=true" >> "$GITHUB_ENV"
      - name: build and publish on tag 'v*'
        if: startsWith(github.event.ref, 'refs/tags/v')
        run: |
          echo "GPUBACKENDTOOLSWHL_BUILD=true" >> "$GITHUB_ENV"
          echo "GPUBACKENDTOOLSWHL_PUBLISH=true" >> "$GITHUB_ENV"
      - name: add core-suffix on non-official repo
        if: github.event.repository.full_name != 'mikekatz04/GPUBackendTools'
        run: |
          echo "GPUBACKENDTOOLSWHL_CORE_SUFFIX=true" >> "$GITHUB_ENV"
      - name: output results
        id: select
        run: |
          echo "build=$GPUBACKENDTOOLSWHL_BUILD" >> $GITHUB_OUTPUT
          echo "publish=$GPUBACKENDTOOLSWHL_PUBLISH" >> $GITHUB_OUTPUT
          echo "core-suffix=$GPUBACKENDTOOLSWHL_CORE_SUFFIX" >> $GITHUB_OUTPUT
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setuptools_scm.outputs.value }}
    steps:
      # =========================
      # = I - Retrieve sources  =
      # =========================
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      # ===================================
      # = II - Prepare Python environment =
      # ===================================
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: |
          pip install setuptools_scm
      # ========================
      # = III - Detect version =
      # ========================
      - name: Update version scheme
        run: |
          sed -i'' -e 's|version_scheme = "no-guess-dev"|version_scheme = "only-version"|g' pyproject.toml
          sed -i'' -e 's|local_scheme = "node-and-date"|local_scheme = "no-local-version"|g' pyproject.toml
      - name: Detect current version
        id: setuptools_scm
        run: |
          VERSION="$(python -m setuptools_scm)"
          echo "notice:: Detected version: ${VERSION}"
          echo "value=${VERSION}" >> $GITHUB_OUTPUT
          echo "version: ${VERSION}" >> $GITHUB_STEP_SUMMARY
  build:
    runs-on: ubuntu-latest
    needs:
      - version
      - select

    steps:
      - uses: actions/checkout@v5
      - name: Add core project dependency on plugin
        run: |
          sed -i'' -e 's|#@DEPS_GBGPUCORE@|"gbgpu==${{ needs.version.outputs.version }}"|g' pyproject.toml
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          python -m pip install build
          python -m build
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs:
      - select
      - build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    environment:
      name: pypiconf
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v5
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1